<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANnMzBTY2Nga2NjYGtjY2BrY2Nga2NjYGtjY2BrY2Nga2M7OGtjY2BrY2Nga2NjYGtjY
        2BrY2Nga2NjYGtjY2BrY2Nga2NjYGtjY2BrY2Nga2NjYGtjY2BrY2Nga2NjYGtjOzhrY2Nga2NjOGtjY
        2BrY2Nga2NjYGtnQ0BvW1tYZNxoauDgaGto4GhrfOBoa3zgaGt84GhrfNxsa30krJt86HRvfNhga3zga
        Gt84GhrfOBoa3zgaGt84GhrfOBoa3zgaGt84GhrfOBoa3zgaGt84GhrfOBoa3zgaGt82GBnfPh8e30cq
        Jt82GBnfOBoa3zgaGt84GhrfOBoa4DgaGtRAJCTUQCQk/UElJf9BJSX/QSUl/0ElJf89ISL/Vzo1/11A
        OP87HyD/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QCUl/zsf
        If9iRDv/TjIu/z8jJP9BJSX/QSUl/0ElJf9BJSX/QCQk9UAkJMtAJCT3QSUl/0ElJf9AJCT/QCQk/z4i
        Iv9FKij/inJl/0gsKv8/IyP/QSUl/0ElJf9AJCX/QCQk/0ElJf9BJSX/QSUl/0AkJP9BJSX/QSUl/0El
        Jf87HiD/Ujc0/4JqXv9AIyP/QCQk/0AkJP9BJSX/QSUl/0ElJf9AJCTuQCQkzEAkJPdBJSX/QSUl/0Qo
        J/9DJyX/PyMk/zYZGf+Ug3j/gm1k/zUWGf9CJiX/QCQl/0QnJv9EKCb/PiIj/0ElJf8+IiP/RSgm/0Im
        Jv9AJCX/QSUl/zYZG/+TfnP/hXBo/zYZGv9AIyT/RCcm/0QnJ/9BJSX/QSUl/0AkJO5AJCTMQCQk90El
        Jf8+IiP/TTEt/2FDOv89ISL/NRcY/4NwZ//Rxrf/TS8q/zcbHf9BJSf/QiUl/2dHOv9ILCj/NBoW/1Ax
        LP9iQTf/PyMk/0ImJv82GRv/Wj84/9nQwf92Xln/NBcY/z4iIv9iRTv/Ryop/0AkJf9BJSX/QCQk7kAk
        JMxAJCT3QSUl/0AkJP89ICH/hGxf/1U7OP8xEhT/jHlw/+vn3f+qlYX/Px8d/zoeH/8+ISP/Vjg0/5Ju
        cv91T2P/kG1u/00wLP8+IiT/OR4e/0UlIf+4pZX/6eTb/31mX/8tDhH/YUhC/3phV/87HyD/QiYm/0El
        Jf9AJCTuQCQkzEAkJPdAJCT/Ox4g/zcYGP+tnpL/nIyD/zgaGP+2qqH/3tnU/9vSyv+cfXz/RSgi/zke
        Gv81HBX/eVRk/7R5yv9rSlD/MxkV/zkfGv9MLiv/p4uH/93VzP/e2NP/pZaN/zQVFf+wopf/nIqA/zQW
        Fv88ICL/QCQl/0AkJO5AJCTMPyIj90grKf9eQTj/jXZp/8e9sf+4q5//l4Bv/97Uw//e08D/39fB/9jC
        vv+ca5j/bUhT/1A0Lf9VNjT/j2ps/00uLP9VODL/c0xd/6Z1ov/cyr7/4NfA/97TwP/a0L3/lXxr/7+0
        qP/Fuaz/hW5g/11AN/9FKSj/PyMj7kAkJMw/IyP3Rikp/1E1Mf9VOjb/RCcl/1Q3Mv/bzbT/9ezQ/+/l
        zP/x58z/5d7B/7CAu/+IRaz/ilCh/7KLn//Zx5n/qn2h/4tRoP+GQ67/uZG8/+fgwv/x583/7+XL//fu
        1P/NvKX/SSwp/0YqKP9VOTb/UTQw/0QoJ/8/IyPuQCQkzEAkJPc/IyT/Oh0f/zMUF/8yExP/lYJ6/+DY
        yf/s4cf/8ejR/+ndxP/Ow6v/zLir/4RHpP+JS6z/6dGp//zoj//gxK//fj2o/45Wp//Qw7D/0MSv/+ve
        x//x6ND/6uDH/9zVx/+IdGz/Lg8Q/zMWGP86Hh//PyMk/0AkJO5AIyPMPSIi9z0hIv9BJCP/Wz88/6qZ
        jv/l4Nj/19LM/+DYwf/z6sz/4tnB/413Yv+0pIL/vpq9/8ahsP/65Yz/8NJz//jmk/+8krP/xai//6iY
        ev+Wf2j/5t3F//PqzP/e1cD/2tTO/+Lc0/+di4H/VDk2/0AkJP89ISL/PiMj7kcpKMxSNS/3ZktB/4lz
        aP+4qJv/zcGy/8u8r//Vx7v/2s3C/9zIuv/Sxbv/y7iq/86+tP/OvbP/2cKh/+nSpf/r0p7/6NKm/9e+
        ov/OvLX/yrer/8m0p//Tw7r/3cm8/9vNxP/Uxrv/yryv/8u/s/+yopX/iHFl/2hMQf9RNi/uQycnzEgr
        KfdOMi//UDY0/0svLv9GKif/TS8p/2BCOv+EZmP/qnqk/5RUtf+LVqf/kVWu/9O2rv/bx6n/v6Ou/6SB
        oP/Bpa3/3cmo/86trP+OUa7/ilSo/5hYtv+kepr/f19d/15AOP9LLin/Rikm/0wwLv9QNTP/TzIv/0gr
        Ku5AJCTMPyMj9z8jI/8+ISL/PSEh/z0hIf88ICH/Oh0f/zYZGf9NMSr/iFt9/38/q/+ndav/9eCX//He
        nf+8nJ7/glyl/8SmnP/y3Zb/896b/55rq/+CRKv/glpx/0UqIv83Ghr/Oh0f/z0hIf89ISH/PSEh/z4h
        Iv8/IyP/PyMj7kAkJMxAJCT3QSUl/0ElJf9BJSX/QSUl/0ElJf9AJCX/PSEj/zEXFv8+Jhf/kWGP/+LG
        tf/02nr/8dZ8/+DJpv/LsK3/486g//HVdv/13YD/3b+5/4dafv85IBL/MxgZ/z0iJP9AJCX/QSUl/0El
        Jf9BJSX/QSUl/0ElJf9AJCTuQCQkzEAkJPdBJSX/QSUl/0ElJf9BJSX/QCQl/0wvKf9ePzj/aUhK/1Q0
        PP+FZVr/69ar//Temv/24ZP/6tel/9G0ov/s2aL/9N6T//Pdnf/lzaj/fFtT/1c2QP9qSkz/Xj83/0wu
        KP9AJCX/QSUl/0ElJf9BJSX/QSUl/0AkJO5AJCTMQCQk90ElJf9BJSX/QSUl/0ElJf9AJCX/Rysn/1g6
        MP+OanL/r3TF/4FcY/+MaW//rXq5/6Fvq/+2jbD/1smz/7GEsf+dbKn/q3m3/4VkYv+GXXD/rnPD/4dm
        Z/9UNy7/Rikm/0AkJf9BJSX/QSUl/0ElJf9BJSX/QCQk7kAkJMxAJCT3QSUl/0ElJf9BJSX/QSUl/0El
        Jf9AJCX/Nxsc/0suLf+jeo//SSwt/1M0Nf+ITqP/dTSk/7yar//SzKz/t5Kx/3Exov+KU5z/SC0n/1Ey
        Nf+heo7/QiUi/zgdIP8/JCX/QSUl/0ElJf9BJSX/QSUl/0ElJf9AJCTuQCQkzEAkJPdBJSX/QSUl/0El
        Jf9BJSX/QSUl/0ElJf89ISL/Vzk0/29RRP84HBz/SC4j/4JJjv+qd73/x7qc/4NnTv/Qxav/oWe4/4NM
        hv9DKR//Oh8f/3JTRf9RMy//PSEj/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0AkJO5AJCTMQCQk90El
        Jf9BJSX/QSUl/0ElJf9BJSX/QSUl/0AkJP9WNy7/SCon/zsgIP9DJiP/lmSR/9a/v//Z0rj/z76n/9zW
        u//Qtb3/kmOI/z4kHv8+IiT/Siwn/1M1Lf8/IyT/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QCQk7kAk
        JMxAJCT3QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9AJCT/PCAg/0gpKv+4nJv/6uDF//Dm
        zf/x6ND/8ObL/+fbwf+vkI7/QCIi/z8jJP8/JCT/QiUk/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0El
        Jf9AJCTuQCQkzEAkJPdBJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QCUl/0ElJf84HBz/YkI8/9TI
        u//d1cX/7uLI//Dnz//s4Mb/29PF/82+r/9UNC7/Ox4g/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0El
        Jf9BJSX/QSUl/0AkJO5AJCTMQCQk90ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/zUX
        F/+Ufm//5eDX/9zW0P/q38r/9evQ/+jfyv/c19L/5N7T/4ZtXv81Fxn/QiYm/0ElJf9BJSX/QSUl/0El
        Jf9BJSX/QSUl/0ElJf9BJSX/QCQk7kAkJMxAJCT3QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0Em
        Jv86HR7/Uzg1/9nRxP/NxLr/p5iP/6COgf+3oov/nYyB/6ublP/WzsT/0ce4/0svK/86Hh7/QSUl/0El
        Jf9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9AJCTuQCQkzEAkJPdBJSX/QSUl/0ElJf9BJSX/QSUl/0El
        Jf9BJSX/PiMj/zsdH/+ikIP/n4+E/0swLf8wERH/Ujc0/7Oklv9GKSf/NBYW/1U5Nv+rnJD/k4B1/zgb
        HP9AJCT/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QSUl/0AkJO5AJCTMQCQk90ElJf9BJSX/QSUl/0El
        Jf9BJSX/QSUl/0ElJf86Hh//Z0xF/39nXv83GRr/ORwe/zodHv+kk4f/5uHT/5WCeP82Ghv/Nhoc/zse
        Hv+Cal7/XEI7/zwgIP9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9BJSX/QCQk7kElJdFAJSX6QSUl/0El
        Jf9BJSX/QSUl/0ElJf9BJSX/PyMk/0ktKf9lSD3/PyIi/z4hIv89ICL/Z0xD/4FqX/9PMzH/hW5i/15C
        O/89ICH/PSAh/0EjI/9jRDv/RCgn/0AkJP9BJSX/QSUl/0ElJf9BJSX/QSUl/0ElJf9AJCTyORoaxjga
        Gu05GhrzOBoa8jgaGvI4GhryOBoa8jgaGvI3GRnyQCIg8jsdHPI2GBjyNhka8jsdHPJUNi7yMxUV8i8S
        EvI3GRjyUjMt8jkbG/I3GhryNhgY8j4eHvI/ISHyNxkZ8jgaGvI4GhryOBoa8jgaGvI4GhryOBoa9Dgb
        G+XY2Nga39fXINjY2CHf19cg39fXIN/X1yDf19cg39fXIN/X1yDX19cg19fXIN/X1yDX19cg39fXINfX
        1yDX19cg39fXINfX1yDf19cg39fXINfX1yDf19cg19fXIN/X1yDf19cg39fXIN/X1yDf19cg39fXIN/X
        1yDY2Ngh3tbWHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////8=
</value>
  </data>
</root>